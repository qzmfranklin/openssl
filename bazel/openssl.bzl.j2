{#

This jinja2 template is used by log_to_bzl.py to generate the openssl.bzl file.

An example would be:
    ./log_to_bzl.py openssl.bzl.j2 --format bazel

In the openssl source tree, the 'external' directory is moved to 'third_party'
to avoid conflicting with Bazel's external dependencies.

The configdata.pm file is generated by running:
    ./config
#}

def openssl():
    # TODO: crypto.copts and ssl.copts are identical except for the -I
    # directives, which are superseded by the includes attribute anyways.
    # Should consolidate the copts for crypto and ssl.

    openssl_includes = [
        'include',
        'crypto',
        'crypto/include',
        'crypto/bn',
        'crypto/des',
        'crypto/modes',
        # The generated headers are stored in the $(GENDIR).
        '$(GENDIR)/%s/include' % PACKAGE_NAME,
        '$(GENDIR)/%s/crypto' % PACKAGE_NAME,
        '$(GENDIR)/%s/crypto/include' % PACKAGE_NAME,
    ]

    if PACKAGE_NAME:
        openssl_includes += [ '.' ]

    crypto_textual_hrds = [
        'crypto/LPdir_unix.c',
        'crypto/ec/ecp_nistz256_table.c',
        'crypto/des/ncbc_enc.c',
    ]

    openssl_linkopts = {{ linkopts }}

    native.cc_library(
        name = 'crypto',
        visibility = [
            '//visibility:public',
        ],
        srcs = {{ crypto.srcs }},
        hdrs = native.glob([
            'crypto/**/*.h',
            'include/**/*.h',
            'e_os.h',
        ]) + {{ crypto.generated_hdrs}},
        includes = openssl_includes,
        defines = [
            'OPENSSL_NO_STATIC_ENGINE',
        ],
        textual_hdrs = crypto_textual_hrds,
        copts = {{ crypto.copts }},
        linkopts = openssl_linkopts,
    )

    native.cc_library(
        name = 'ssl',
        visibility = [
            '//visibility:public',
        ],
        srcs = {{ ssl.srcs }},
        hdrs = native.glob([
            'ssl/**/*.h',
        ]),
        includes = openssl_includes,
        copts = {{ ssl.copts }},
        linkopts = openssl_linkopts,
        deps = [
          ':crypto',
        ]
    )

    native.genrule(
        name = 'generate_internal_files',
        srcs = native.glob([
            # Perl modules used to generate asm files.
            #
            # The glob pattern below does not include the .pm files under the
            # external/ directory as bazel thinks those are part of some
            # external repository, complained as such:
            #       Label '//:external/perl/transfer/Text/Template.pm' crosses boundary of subpackage 'external' (perhaps you meant to put the colon here: '//external:perl/transfer/Text/Template.pm'?).
            # The workaround is to `mv external third_party`.
            '**/*.pm',
            '**/*.pl',
            '**/*.h.in',
        ]) + [
            ':configdata_pm',
        ] + crypto_textual_hrds,
        outs = {{ genrule.outs }},
        cmd = ' && '.join([
            # Make the perl module files available at runtime.
            'export DIR=%s' % '/'.join(['.', PACKAGE_NAME]),
            'export PERL5LIB=$$DIR/third_party/perl:$$(dirname $(location :configdata_pm))',
        ] + {{ genrule.cmds }}),
    )

    native.genrule(
        name = 'configdata_pm',
        srcs = native.glob([
            '**/*.pm',
            # The 10-main.conf is the database storing the combinationas of
            # platforms compilers supported by openssl.
            'Configurations/**',
            # The existence of the following directories under crypto/ is used
            # to populate the correct set of configuration options:
            #       aes aria bf camellia cast des dh dsa ec hmac idea md2 md5
            #       mdc2 rc2 rc4 rc5 ripemd rsa seed sha
            'crypto/**',
            # The various build.info files are used to populate the
            # %unified_info section in the generated configdata.pm file.
            '**/build.info',
        ]) + [
            'Configure',
            'config',
            # The opensslv.h file contains version information and is used by
            # config.
            'include/openssl/opensslv.h',
            'util/dofile.pl',
        ],
        outs = [
            # This perl module is used to generate other .h and .s files.
            'configdata.pm',
        ],
        cmd = ' && '.join([
            'export DIR=%s' % '/'.join(['.', PACKAGE_NAME]),
            'export PERL5LIB=$$DIR/util:$$DIR/third_party/perl:$(@D)',
            '$(location config) &> /dev/null',
            'rm -f $@',
            'cp -L configdata.pm $(@D)',
        ]),
    )

    native.cc_binary(
        name = 'openssl',
        visibility = [
            '//visibility:public',
        ],
        srcs = native.glob([
            'apps/*.c',
            'apps/*.h',
        ], exclude=[
            'apps/win32_init.c',
        ]) + [
            ':progs_h',
        ],
        deps = [
            ':ssl',
        ],
        copts = [
            # The generated progs.h file resides in the $GENDIR
            '-I$(GENDIR)/%s' % PACKAGE_NAME,
        ] + {{ crypto.copts }},
        linkopts = [
            '-ldl',
        ],
    )

    native.genrule(
        name = 'progs_h',
        srcs = native.glob([
            'apps/*.c',
        ]) + [
            'apps/progs.pl',
            ':configdata_pm',
        ],
        outs = [
            'progs.h',
        ],
        cmd = ' && '.join([
            # The python3 -c '...' hack emulates the GNU `readlink -f`, which is
            # absent from BSD based distributions.
            r'''export DIR=$$(python3 -c 'import os; print(os.path.realpath("%s"))') ''' % '/'.join(['.', PACKAGE_NAME]),
            r'''export PERL5LIB=$$DIR:$$DIR/third_party/perl:$$(python3 -c 'import os; print(os.path.realpath("$(@D)"))') ''',
            'pushd $$DIR',
                # This perl script must be invoked using exactly this format.
                # Otherwise, it will fail to scan the apps/openssl directory and
                # miss out the `extern int` declarations in the generated
                # progs.h file.
                'perl apps/progs.pl apps/openssl > tmp',
            'popd',
            'mv $$DIR/tmp $@',
        ]),
    )
